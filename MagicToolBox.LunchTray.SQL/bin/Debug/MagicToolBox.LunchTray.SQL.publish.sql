/*
Deployment script for LunchTrayDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LunchTrayDB"
:setvar DefaultFilePrefix "LunchTrayDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [tool]...';


GO
CREATE SCHEMA [tool]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [dbo].[SessionEventLog]...';


GO
CREATE TABLE [dbo].[SessionEventLog] (
    [ID]          INT      IDENTITY (1, 1) NOT NULL,
    [EventTypeID] INT      NOT NULL,
    [Billable]    BIT      NOT NULL,
    [Start]       DATETIME NOT NULL,
    [Ended]       DATETIME NULL,
    [Message]     TEXT     NULL,
    CONSTRAINT [PK_SessionEventLog_ID] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[SessionEventTypes]...';


GO
CREATE TABLE [dbo].[SessionEventTypes] (
    [ID]          INT            IDENTITY (1, 1) NOT NULL,
    [Name]        NVARCHAR (25)  NOT NULL,
    [Description] NVARCHAR (255) NULL,
    [Billable]    BIT            NOT NULL,
    CONSTRAINT [pk_SessionEventTypes_ID] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [uq_SessionEventTypes_Name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[DF_SessionEventLog_Billable]...';


GO
ALTER TABLE [dbo].[SessionEventLog]
    ADD CONSTRAINT [DF_SessionEventLog_Billable] DEFAULT (0) FOR [Billable];


GO
PRINT N'Creating [dbo].[DF_SessionEventLog_Start]...';


GO
ALTER TABLE [dbo].[SessionEventLog]
    ADD CONSTRAINT [DF_SessionEventLog_Start] DEFAULT (GetDate()) FOR [Start];


GO
PRINT N'Creating [dbo].[DF_SessionEventTypes_Billable]...';


GO
ALTER TABLE [dbo].[SessionEventTypes]
    ADD CONSTRAINT [DF_SessionEventTypes_Billable] DEFAULT (0) FOR [Billable];


GO
PRINT N'Creating [dbo].[FK_SessionEventLog_EventTypeID]...';


GO
ALTER TABLE [dbo].[SessionEventLog]
    ADD CONSTRAINT [FK_SessionEventLog_EventTypeID] FOREIGN KEY ([EventTypeID]) REFERENCES [dbo].[SessionEventTypes] ([ID]);


GO
PRINT N'Creating [tool].[FormatText]...';


GO
/*
================================================================================
Author: John Williams
Create Date: 01/01/2012
Description: This function will format/parse text and replace c# escape characters with proper sql characters
             i.e. \r\n is carriage return+line feed in C# but is Char(13)+Char(10) in T-SQL
--------------------------------------------------------------------------------

--- Change Log -----------------------------------------------------------------
Date          Author    Description
-----------   -------   ---------------------------------------------------------
01/01/2012    JHW       • Created This Proc
================================================================================ */
Create Function tool.FormatText (
  @Format nVarChar(3000)
)
--------------------------------------------------------------------------------
Returns nVarChar(4000)
As
Begin
-------------------------------------------------------------------------------
Declare @Return VarChar(4000)
-- Loop Iteration Variables
Declare @ix Int, @Code Int, @Char Char(4)
-- Set Default Output Value
Set @Return = @Format
-------------------------------------------------------------------------------
-- Parse out any C# style escape characters
If PatIndex('%\TtNnRrQq%', @Return) > 0
Begin
  Set @Return = Replace(@Return, '\T', Char(9))  -- Tab
  Set @Return = Replace(@Return, '\N', Char(10)) -- New Line
  Set @Return = Replace(@Return, '\R', Char(13)) -- Carriage Return
  -- \Q is custom for this routine only. It's not a valid C# escape character 
  Set @Return = Replace(@Return, '\Q', Char(39)) -- Single quote
End
-------------------------------------------------------------------------------
-- Initialize Loop 
-- Look for any instances ascii character codes defined explicitly using \000 format
Set @ix = PatIndex('%\0-90-90-9 %', @Return)
While @ix > 0
Begin
   Set @Char = SubString(@Return, @ix, 4)
   Set @Code = Right(@Char, 3)
   -- Valid Ascii Code ?
   If ( @Code <= 255 )
   Set @Return = Replace(@Return, @Char, Char(@Code))
   -- Iterate Loop Next
   Set @ix = PatIndex('%\0-90-90-9 %', @Return)
End
-------------------------------------------------------------------------------
Return @Return
-------------------------------------------------------------------------------
End
GO
PRINT N'Creating [tool].[FormatString]...';


GO
/*
================================================================================
     Author: John Williams
Create Date: 01/01/2012
Description: This function will format/parse text like C# string.Format()             
    Example: Select FormatString = tool.FormatString('Arg0: {0}\NArg1: {1}\NArg2: {2}', 'Zero', 'One', 'Two')
--------------------------------------------------------------------------------

--- Change Log -----------------------------------------------------------------
Date          Author    Description
-----------   -------   ---------------------------------------------------------
01/01/2012    JHW       • Created This Function
================================================================================ */
Create Function tool.FormatString (
  @Format VarChar(Max)
 ,@Arg0 VarChar(Max)
 ,@Arg1 VarChar(Max) = Null
 ,@Arg2 VarChar(MAX) = NULL
)
--------------------------------------------------------------------------------
Returns VarChar(Max)
As
Begin
---------------------------------------------------------------------------------
  Declare @Return VarChar(Max)
  -------------------------------------------------------------------------------
  --- Parse out any .Net style string format variables
  Set @Return = @Format
  Set @Return = Replace(@Return, '{0}', IsNull(@Arg0, ''))
  Set @Return = Replace(@Return, '{1}', IsNull(@Arg1, ''))
  Set @Return = Replace(@Return, '{2}', IsNull(@Arg2, ''))
  -- Return The Results!!
  Set @Return = tool.FormatText(@Return)
  Return @Return
  -------------------------------------------------------------------------------
End
GO
PRINT N'Creating [tool].[FormatString1]...';


GO
/*
================================================================================
     Author: John Williams
Create Date: 01/01/2012
Description: This function will format/parse text like C# string.Format()             
    Example: Select FormatString = tool.FormatString1('Arg0: {0}, 'Zero')
--------------------------------------------------------------------------------

--- Change Log -----------------------------------------------------------------
Date          Author    Description
-----------   -------   ---------------------------------------------------------
01/01/2012    JHW       • Created This Function
================================================================================ */
Create Function tool.FormatString1 (
  @Format VarChar(Max)
 ,@Arg0 VarChar(Max)
)
--------------------------------------------------------------------------------
Returns VarChar(Max)
As
Begin
---------------------------------------------------------------------------------
-- Make a call to the normal 3 argument formatString
Return tool.FormatString(@Format, @Arg0, Default, Default)
---------------------------------------------------------------------------------
End
---------------------------------------------------------------------------------
GO
PRINT N'Creating [dbo].[SessionEventLog_Insert]...';


GO
/*
================================================================================
Author: John Williams
Create Date: 08/28/2018
Description: Inserts A Record To dbo.SessionEventLog and returns Scope_Identity()
--------------------------------------------------------------------------------

--- Change Log -----------------------------------------------------------------
Date          Author    Description
-----------   -------   ---------------------------------------------------------
08/28/2018    JHW       • Created This Stored Procedure
09/07/2018    JHW       • Added Billable column to capture default from types
                          but allow override to mark a break as billable (Meeting, etc) 
================================================================================ */
Create Proc dbo.SessionEventLog_Insert
  @EventTypeID Int
 ,@Start DateTime
 ,@Ended DateTime = Null
 ,@Message Text = Null
 ,@NewID Int = Null Out
As
--------------------------------------------------------------------------------
Insert dbo.SessionEventLog(EventTypeID, Billable, Start, Ended, Message)
--------------------------------------------------------------------------------
Select EventTypeID = t.ID
      ,Billable = t.Billable
      ,Start = @Start
      ,Ended = @Ended
      ,Message = @Message
--------------------------------------------------------------------------------
  From dbo.SessionEventTypes t
--------------------------------------------------------------------------------
 Where t.ID = @EventTypeID
--------------------------------------------------------------------------------
Select @NewID = Scope_Identity()
Return @NewID
--------------------------------------------------------------------------------
GO
/*
Post-Deployment Script Template                     
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.      
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql                        
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable                     
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/
--- Turn ON so that ID = Microsoft.Win32.SessionSwitchReason Enum --------------
Set Identity_Insert dbo.SessionEventTypes On
--------------------------------------------------------------------------------

--- Insert The Event Types -----------------------------------------------------
Insert dbo.SessionEventTypes(ID, Name, Billable, Description)
--------------------------------------------------------------------------------
Values
(5, 'SessionLogOn' , 0, 'Microsoft.Win32.SessionSwitchReason; The user session state changes to SessionLogOn when the workstation logs on'   ),
(6, 'SessionLogOff', 1, 'Microsoft.Win32.SessionSwitchReason; The user session state changes to SessionLogOff when the workstation logs off' ),
(7, 'SessionLock'  , 1, 'Microsoft.Win32.SessionSwitchReason; The user session state changes to SessionLock when the workstation is locked'  ),
(8, 'SessionUnlock', 0, 'Microsoft.Win32.SessionSwitchReason; The user session state changes to SessionLock when the workstation is locked'  )
--------------------------------------------------------------------------------

--- Turn OFF Identity Insert ---------------------------------------------------
Set Identity_Insert dbo.SessionEventTypes Off
--------------------------------------------------------------------------------
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
